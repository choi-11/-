//
//  ViewController.swift
//  Audio
//
//  Created by 203a17 on 2022/05/20.
//
/* AVAuioPlayer 앱에서는 기본적으로 '재생모드'와 '녹음 모드'를 스위치로 전환할 수 있는 앱입니다. 재생 모드에서는 재생, 일시 정지, 정지를 할 수 있으며 음악이 재생되는 동안 재생 정도가 프로그레스 
뷰와 시간으로 표시됩니다. 또한 볼륨 조절도 가능합니다. 녹음 모드에서는 녹음을 할 수 있고 녹음이 되는 시간도 표시할 수 있습니다. 녹음이 종료되면 녹음 파일을 재생, 일시 정지, 정지할 수 있습니다. 
그리고 이 두가지 모드를 스위치로 전환하여 반복적으로 사용할 수 있습니다. */
import UIKit
import AVFoundation

class ViewController: UIViewController,AVAudioPlayerDelegate, AVAudioRecorderDelegate {
    
    
    var audioPlayer : AVAudioPlayer! //avaudioplayer 인스턴스 변수//
        
    var audioFile : URL! //재생할 오디오의 파일명 변수//
    
    let MAX_VOLUME : Float = 10.0 //최대 볼륨, 실수형 상수//
    
    var progressTimer : Timer! //타이머를 위한 변수//
    
    let timePlayerSelector:Selector = #selector(ViewController.updatePlayTime)
    let timeRecordSelector:Selector = #selector(ViewController.updateRecordTime)

    @IBOutlet var pvProgressPlay: UIProgressView!
    @IBOutlet var lblCurrentTime: UILabel!
    @IBOutlet var lblEndTime: UILabel!
    @IBOutlet var btnPlay: UIButton!
    @IBOutlet var btnPause: UIButton!
    @IBOutlet var btnStop: UIButton!
    @IBOutlet var slVolume: UISlider!
    
    @IBOutlet var btnRecord: UIButton!
    @IBOutlet var lblRecordTime: UILabel!
    
    var audioRecorder : AVAudioRecorder! //audioRecorder 인스턴스를 추가
    var isRecordMode = false //현재 녹음모드라는 것을 나타낼 isrecordmode를 추가합니다. 기본값을 false로 하여 처음 앱 실행했을 때 녹음모드가 아닌 재생모드가 나타나게 합니다. 
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
       selectAudioFile()
        if !isRecordMode{ //재생 모드일 때//
            initPlay()
            btnRecord.isEnabled = false
            lblRecordTime.isEnabled = false
        } else { //녹음 모드일 때//
            initRecord()
        }
        
    }
    //재생 모드와 녹음 모드에 따라 다른 파일을 선택함
    func selectAudioFile(){
        if !isRecordMode{
            audioFile = Bundle.main.url(forResource: "michael", withExtension: "mp3") //재생모드일 때는 오디오 파일
        } else{
            let documentDirectory  = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
            audioFile = documentDirectory.appendingPathComponent("recordFile.m4a") //녹음 모드일 때는 새 파일 생성
        }
    }
    
    //녹음 모드의 초기화
    func initRecord(){
        let recordSettings = [
            AVFormatIDKey : NSNumber(value: kAudioFormatAppleLossless as UInt32),
            AVEncoderAudioQualityKey : AVAudioQuality.max.rawValue,
            AVEncoderBitRateKey : 320000,
            AVNumberOfChannelsKey :2,
            AVSampleRateKey : 44100.0] as [String : Any]
        
        do{
            audioRecorder =  try AVAudioRecorder(url: audioFile,settings: recordSettings)
        } catch let error as NSError {
            print("Error-initRecord : \(error)")
        }
        
        audioRecorder.delegate = self //audiorecorder의 델리게이트를 self로 설정
        
        slVolume.value = 1.0 //볼륨 슬라이더 값을 1.0으로 설정
        audioPlayer.volume = slVolume.value//오디오 플레이어의 볼륨도 슬라이더 값과 동일한 1.0으로 설정
        lblEndTime.text = convertNSTimeInterval2String(0) //총 재생 시간을 0으로 바꿉니다. 
        lblCurrentTime.text = convertNSTimeInterval2String(0) //현재 재생 시간을 0으로 바꿉니다. 
        setplayButtons(false, pause: false, stop: false)//플레이, 중지, 스탑 버튼을 비활성화로 설정합니다 
       
        let session = AVAudioSession.sharedInstance()
        do{
            try AVAudioSession.sharedInstance().setCategory(.playAndRecord, mode: .default)
            try AVAudioSession.sharedInstance().setActive(true)
        } catch let error as NSError{
            print(" Error-setCategory : \(error)")
        }
        do{
            try session.setActive(true)
        } catch let error as NSError {
            print(" Error-setActive : \(error)")
        }
    }
    
    //재생 모드의 초기화
    func initPlay(){
        do{
            audioPlayer = try AVAudioPlayer(contentsOf: audioFile)
        } catch let error as NSError{
            print("Error-initPlay : \(error)")
        }
        
    
        
    
    slVolume.maximumValue = MAX_VOLUME //슬라이더의 최대 볼륨을 상수 10.0으로 초기화
    slVolume.value = 1.0 //슬라이더의 볼륨을 1.0으로 초기화함
    pvProgressPlay.progress = 0 // 프로그레스뷰의 진행을 0으로 초기화합니다. 
    
    audioPlayer.delegate = self //델리게이트를 self로 합니다.
    audioPlayer.prepareToPlay() //실행    
    audioPlayer.volume = slVolume.value //audioplayer의 볼륨을 방금 앞에서 초기화한 슬라이더의 볼륨 값 1.0으로 초기화합니다. 
    
        lblEndTime.text = convertNSTimeInterval2String(audioPlayer.duration) //오디오 파일의 재생 시간인 값을 convertNSTimeInterval2String 함수를 이용해 lblEndTime.text의 텍스트에 출력//
        lblCurrentTime.text = convertNSTimeInterval2String(0) 
        setplayButtons(true, pause: false, stop: false)
        
        //오디오의 재생, 일시정지 및 정지 버튼 제어하기//
        btnPlay.isEnabled = true
        btnPause.isEnabled = false
        btnStop.isEnabled = false
}
    //재생 ,일시정지, 정비 버튼을 활성화 또는 비활성화하는 함수
    func setplayButtons(_ play:Bool, pause:Bool, stop:Bool){
        btnPlay.isEnabled = play
        btnPause.isEnabled = pause
        btnStop.isEnabled = stop
    }
    //00:00 형태의 문자열로 반환함
    
    func convertNSTimeInterval2String(_ time:TimeInterval) -> String{
        let min = Int(time/60) //재생 시간의 매개변수인 time값을 60으로 나눈 '몫' 을 정수 값으로 변환하여 상수 min값에 초기화
        let sec = Int(time.truncatingRemainder(dividingBy: 60)) //time 값을 60으로 나눈 '나머지' 값을 정수 값으로 변환하여 상수 sec 값에 초기화
        let strTime = String(format: "%02d:%02d", min, sec) //이 두 값을 활용해 문자열로 변환하여 상수 strtime에 초기화
        return strTime //이 값을 호출한 함수로 돌려보냄
    }
    //재생 버튼을 클릭하였을 때
    @IBAction func btnPlayAudio(_ sender: UIButton) {
        audioPlayer.play() //함수를 실행해 오디오를 재생
        setplayButtons(false, pause: true, stop: true) //play 버튼은 비활성화, 나머지 두 버튼은 활성화합니다. 
        progressTimer = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: timePlayerSelector, userInfo: nil, repeats: true) //타이머 이용해 재생시간 표시
    }
    //0.1초마다 호출되며 재생 시간을 표시함
    @objc func updatePlayTime() {
        lblCurrentTime.text = convertNSTimeInterval2String(audioPlayer.currentTime)
        pvProgressPlay.progress = Float(audioPlayer.currentTime/audioPlayer.duration)
    }
    //일시정지 버튼을 클릭하였을 때
    @IBAction func btnPauseAudio(_ sender: UIButton) {
        audioPlayer.pause()
        setplayButtons(true, pause: false, stop: true)
    }
    //정지 버튼을 클릭할였을 때 
    @IBAction func btnStopAudio(_ sender: UIButton) {
        audioPlayer.stop()
        audioPlayer.currentTime = 0 //오디오를 정지하고 다시 재생하면 처음부터 재생해야 하므로 audioplayer.currenttime을 0으로 합니다. 
        lblCurrentTime.text = convertNSTimeInterval2String(0) //재생 시간도 0으로 초기화
        setplayButtons(true, pause: false, stop: false)
        progressTimer.invalidate()//타이머도 무효화합니다.
    }
    //볼륨 슬라이더 값을 audioplayer.volume에 대입함
    @IBAction func slChangeVolume(_ sender: UISlider) {
        audioPlayer.volume = slVolume.value
    }
    //재생이 종료되었을 때 호출됨
    func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {
        progressTimer.invalidate() //타이머를 무효화합니다.
        setplayButtons(true, pause: false, stop: false) //플레이 버튼을 활성화하고 나머지 버튼은 비활성화합니다. 
    }
    //스위치를 on/off하여 녹음 모드인지 재생 모드인지를 결정함
    @IBAction func swRecordMode(_ sender: UISwitch) {
        if sender.isOn{ //녹음 모드일 때
            audioPlayer.stop()
            audioPlayer.currentTime = 0
            lblRecordTime!.text = convertNSTimeInterval2String(0)
            isRecordMode = true   //  스위치가 on되었을 때는 녹음 모드이므로 오디오 재생을 중지하고, 현재 재생 시간을 0으로 만들고, 레코드모드의 값을 참으로 설정하고, 녹음 버튼과 녹음 시간을 활설화로 설정
            btnRecord.isEnabled = true 
            lblRecordTime.isEnabled = true
        } else { //재생 모드일 때
            isRecordMode = false
            btnRecord.isEnabled = false   // 스위치가 on이 아닐 때, 즉 재생모드일 때는 레코드모드의 값을 거짓으로 설정하고, 녹음 버튼과 녹음 시간을 비활성화하며, 녹음시간은 0으로 초기화
            lblRecordTime.isEnabled = false
            lblRecordTime.text = convertNSTimeInterval2String(0)
        }
        selectAudioFile() //모드에 따라 오디오 파일을 선택함
        //모드에 따라 재생 초기화 또는 녹음 초기화를 수행함.
        if !isRecordMode{ //녹음 모드가 아닐 때, 즉 재생 모드일 때
            initPlay()
        } else { //녹음 모드일 때
            initRecord()
            
        }
    }
    @IBAction func btnRecord(_ sender: UIButton) {
        if (sender as AnyObject).titleLabel?.text == "Record" {
        //버튼이 "record"일 때 녹음을 중지함
            audioRecorder.record()
            (sender as AnyObject).setTitle("Stop", for: UIControl.State())
            progressTimer = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: timeRecordSelector, userInfo: nil, repeats: true) //0.1초 간격으로 타이머를 생성
        } else {// 버튼이 "Stop"일 때 녹음을 위한 초기화를 수행함
            audioRecorder.stop()
            progressTimer.invalidate()
            (sender as AnyObject).setTitle("Record", for: UIControl.State())
            btnPlay.isEnabled = true
            initPlay()
        }
    }
    
    //0.1초마다 호출되며 녹음 시간을 
    @objc func updateRecordTime() {
        lblRecordTime.text = convertNSTimeInterval2String(audioRecorder.currentTime)
    }
}

