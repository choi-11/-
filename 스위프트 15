/*카메라를 사용하여 사진이나 비디오를 촬영하면 포토 라이브러리에 저장되고, 이렇게 저장된 사진이나 비디오를 포토 라이브러리에서 불러올 수 있다. 또한 사진을 편집한 후 포토 라이브러리에 저장할 수도 있다
 import는 다른 파일이나 클래스를 추가하는 역할을 합니다 */



import UIKit
import MobileCoreServices //다양한 타입들을 정의해 놓은 헤더 파일 추가

class ViewController: UIViewController, UINavigationControllerDelegate,
                        UIImagePickerControllerDelegate {//델리게이트 프로토콜 추가
    @IBOutlet var imgView: UIImageView!
    
    //
    let imagePicker: UIImagePickerController! = UIImagePickerController() //UIImagePickerController()의 인스턴스 변수 생성
    var captureImage: UIImage! //촬영을 하거나 포토 라이브러리에서 불러온 사진을 저장할 변수
    var videoURL: URL! //녹화한 비디오의 url을 저장할 변수
    var flagImageSave = false //이미지 저장 여부를 나타낼 변수
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
//사진 촬영하기
    @IBAction func btnCaptureImageFromCamera(_ sender: UIButton) {
    //만일 카메라를 사용할 수 있다면
        if (UIImagePickerController.isSourceTypeAvailable(.camera)) {
            flagImageSave = true //사진 저장 플래그를 트루로 설정
            
            imagePicker.delegate = self //이미지 피커의 델리게이트를 self로 설정
            imagePicker.sourceType = .camera //이미지 피커의 소스  타입을 카메라로 설정
            imagePicker.mediaTypes = ["public.image"] //미디어 타입을 설정
            imagePicker.allowsEditing = false //편집을 허용하지 않음
            //뷰 컨트롤러를 imagePicker로 대신
            present(imagePicker, animated: true, completion: nil)
        }
        else {
        //카메라를 사용할 수 없을 ㄷ때 경고 창 출력
            myAlert("Camera inaccessable", message: "Application cannot access the camera.")
        }
        
        
    }
    //사진 불러오기 
    @IBAction func btnLoadImageFromLibrary(_ sender: UIButton) {
        if (UIImagePickerController.isSourceTypeAvailable(.photoLibrary)) {
            flagImageSave = false
            
            imagePicker.delegate = self
            //이미지 피커의 소스 타입을 photoLibrary로 설정
            imagePicker.sourceType = .photoLibrary
            imagePicker.mediaTypes = ["public.image"]
            imagePicker.allowsEditing = true //편집을 허용
            
            present(imagePicker, animated: true, completion: nil)
        }
        else {
            myAlert("Photo album inaccessable", message: "Application cannot access the photo album.")
        }
        
        
    }
    //비디오 촬영하기
    @IBAction func btnRecordVideoFromCamera(_ sender: UIButton) {
        if (UIImagePickerController.isSourceTypeAvailable(.camera)) { //카메라의 사용가능 여뷰를 확인합니다 사용할 수 있는 경우에만 아래 내용을 수행
            flagImageSave = true //카메라 촬영 후 저장할 것인기 때문에 이미지 저장을 허용합니다. 
            
            imagePicker.delegate = self //이미지 피커의 델리게이트를self로 설정
            imagePicker.sourceType = .camera //이미지 피커의 소스 타입을 카메라로 설정
            imagePicker.mediaTypes = ["public.movie"] //미디어 타입은 "public.movie" 로 설정
            imagePicker.allowsEditing = false //편집은 허용하지 않습니다 .
            
            present(imagePicker, animated: true, completion: nil) //현재 뷰 컨트롤러를 imagePicker로 대체 즉 뷰에 imagePicker가 보이게 한다. 
        }
        else {
            myAlert("Camera inaccessable", message: "Application cannot access the camera.") //카메라를 사용할 수 없을 때는 경고 창을 나타냅니다. 
        }
        
    }
    //비디오 불러오기
    @IBAction func btnLoadVideoFromLibrary(_ sender: UIButton) {
        
        if (UIImagePickerController.isSourceTypeAvailable(.photoLibrary)) {
            flagImageSave = false
            
            imagePicker.delegate = self
            imagePicker.sourceType = .photoLibrary
            imagePicker.mediaTypes = ["public.movie"]
            imagePicker.allowsEditing = false
            
            present(imagePicker, animated: true, completion: nil)
        }
        else {
            myAlert("Photo album inaccessable", message: "Application cannot access the photo album.")
        }
    }
    //사진, 비디오 촬영이나 선택이 끝났을 때 호출되는 델리게이트 메서드
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        //미디어 종류 확인
        let mediaType = info[UIImagePickerController.InfoKey.mediaType] as! NSString //미디어의 종류를 확인
        
        //미디어가 사진이면
        if mediaType.isEqual(to: "public.image" as String) { //미디어 종류가 사진일 경우
           
           //사진을 가져옴
           captureImage = info[UIImagePickerController.InfoKey.originalImage] as? UIImage// 사진을 가져와 captureImage에 저장

            if flagImageSave { //사진을 포토라이브러리에 저장
                UIImageWriteToSavedPhotosAlbum(captureImage, self, nil, nil) //flagImageSave가 트루이면 가져온 사진을 포토라이브러리에 저장
            }

            imgView.image = captureImage //가져온 사진을 이미지 뷰에 출력
        }
        else if mediaType.isEqual(to: "public.movie" as String) { //미디어 종류가 비디오일 경우
            if flagImageSave {
                videoURL = (info[UIImagePickerController.InfoKey.mediaURL] as! URL) //flagImageSave가 트루이면 촬영한 비디오를 가져와 포토 라이브러리에 저장

                UISaveVideoAtPathToSavedPhotosAlbum(videoURL.relativePath, self, nil, nil) 
            }
        }
        //현재의 뷰 제거
        self.dismiss(animated: true, completion: nil) //현재의 뷰 컨트롤러를 제거합니다. 즉 뷰에서 이미지 피커 화면을 제거하여 초기 뷰를 보여 줍니다. 
    }
    //사진,비디오 촬영이나 선택을 취소했을 때 호출되는 델리게이트 메서드
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
    //현재의 뷰 제거
        self.dismiss(animated: true, completion: nil)
    }

    func myAlert(_ title: String, message: String) { //경고 표시용 매서드 작성하기 
        let alert = UIAlertController(title: title, message: message, preferredStyle: UIAlertController.Style.alert)
        let action = UIAlertAction(title: "Ok", style: UIAlertAction.Style.default, handler: nil)
        alert.addAction(action)
        self.present(alert, animated: true, completion: nil)
    }
}
    

